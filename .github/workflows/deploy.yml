name: cicd-uas

on:
  push:
    branches:
      - '*'
jobs:
  build:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: 'Start build job'
        run: |
          echo "Starting the build job"

      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'Setup nodejs'
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - run: yarn install
      - run: yarn build

      - name: 'Login to Dockerhub'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.userthalib }}
          password: ${{ secrets.dbe5a4bd-7f42-4917-9bda-08b3199c8243 }}

      - name: 'Build and push'
        run: |
          docker build -t ${{ secrets.userthalib }}/Basic-CRUD-PHP-MySQL .
          docker push ${{ secrets.userthalib}}/Basic-CRUD-PHP-MySQL

      - name: 'Write config'
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.ocid1.user.oc1..aaaaaaaa2ek3cexi3t6rqxnbd2gwgu5425mvbzjkl5fjiihqw4lykqsbxqeq}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.fe:c7:4e:ef:d8:5f:35:45:e4:5d:71:9e:2b:8f:54:ec}}" >> ~/.oci/config
          echo "region=${{secrets.ap-osaka-1}}" >> ~/.oci/config
          echo "tenancy=${{secrets.ocid1.tenancy.oc1..aaaaaaaawd3zr3elgxyk5sjebpqcw26iobelyxkwjarggw6rujmpszjk27oa}}" >> ~/.oci/config
          echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/oci_api_key.pem
          echo "${{secrets.OCI_KEY_PUBLIC}}" >> ~/.oci/oci_api_key_public.pem

      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "/home/runner/bin" >> $GITHUB_PATH
          exec -l $SHELL

      - name: 'Fix Config File Permissions'
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/oci_api_key.pem

      - name: 'Check Existing Instance'
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance list \
            --lifecycle-state RUNNING \
            --compartment-id ${{secrets.ocid1.tenancy.oc1..aaaaaaaawd3zr3elgxyk5sjebpqcw26iobelyxkwjarggw6rujmpszjk27oa}} \
            --display-name cicd-demo \
            --query "data [0].id" \
            --raw-output \
            )" >> $GITHUB_ENV

      - name: 'Create Instance'
        if: ${{!env.INSTANCE_OCID}}
        run: |
          echo "INSTANCE_OCID=$( \
            oci compute instance launch \
            -c ${{secrets.ocid1.tenancy.oc1..aaaaaaaawd3zr3elgxyk5sjebpqcw26iobelyxkwjarggw6rujmpszjk27oa}} \
            --availability-domain ${{secrets.KNKI:AP-OSAKA-1-AD-1}} \
            --shape ${{secrets.VM.Standard.E2.1.Micro}} \
            --shape-config '{"memoryInGBs": 1, "ocpus": 1}' \
            --assign-public-ip true \
            --display-name cicd-demo \
            --image-id ${{secrets.ocid1.image.oc1.ap-osaka-1.aaaaaaaaoyplbp7i7ublp2udzydqjeyfieenejbkq4iqz2o6tbycsdk6xwda}} \
            --ssh-authorized-keys-file /home/runner/.oci/oci_api_key_public.pem \
            --subnet-id ${{secrets.ocid1.subnet.oc1.ap-osaka-1.aaaaaaaahvwtkip635nmpqudzxekkfgwjo5xwqi7ts4rrekbnpxxknnvhbua}} \
            --wait-for-state RUNNING \
            --query "data.id" \
            --raw-output \
            )" >> $GITHUB_ENV
      - name: 'Get Instance IP'
        run: |
          echo "INSTANCE_IP=$( \
            oci compute instance list-vnics \
            --instance-id ${{env.INSTANCE_OCID}} \
            --query 'data [0]."public-ip"' \
            --raw-output \
            )" >> $GITHUB_ENV
          echo Instance IP: ${{ env.INSTANCE_IP }}
      - name: 'Wait for SSH'
        run: |
          while ! nc -w5 -z ${{ env.INSTANCE_IP }} 22; do
          sleep 5
          echo "SSH not available..."
          done; echo "SSH ready!"

      - name: 'Deploy Deployment Configuration'
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.INSTANCE_IP }}
          username: opc
          key: ${{ secrets.OCI_KEY_FILE }}
          source: "docker-compose.yml"
          target: "./"

      - name: 'Running Docker Compose'
        uses: appleboy/ssh-action@master
        with:
          host: ${{env.INSTANCE_IP}}
          username: opc
          key: ${{secrets.OCI_KEY_FILE}}
          script: |
            sudo yum install -y yum-utils
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            sudo yum install -y docker-ce docker-ce-cli containerd.io
            sudo systemctl restart docker
            sudo firewall-cmd --zone=docker --add-service=http --permanent
            sudo firewall-cmd --reload
            sudo pip3 install docker-compose
            sudo /usr/local/bin/docker-compose up -d